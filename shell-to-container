#!/bin/bash
set -e

##
# Shell to an ECS container
# Open an interactive shell on a running ECS task container.
##

USAGE="Open an interactive shell on a running ECS task container.

Usage:
  shell-to-container <cluster> <service> <container> [<shell>]

Parameters:
  <cluster>    Name of the ECS cluster.
  <service>    Name of the service.
  <container>  Name of the container within the task.
  [<shell>]    The shell command to run. Defaults to 'bash'.

Example usage:
  shell-to-container default nginx-server nginx
"

if [ -z $1 ] || [ -z $2 ] || [ -z $3 ]
then
	echo "$USAGE"
	exit 1
fi

CLUSTER=$1
SERVICE=$2
CONTAINER=$3
SHELL=$4

if [ -z $SHELL ]
then
	SHELL="bash"
fi

export AWS_DEFAULT_OUTPUT="text"

TASK_ARN=$(aws ecs list-tasks --cluster $CLUSTER --service-name $SERVICE --query 'taskArns[0]')
CONTAINER_INSTANCE=$(aws ecs describe-tasks --cluster $CLUSTER --tasks $TASK_ARN --query 'tasks[0].containerInstanceArn')
EC2_INSTANCE=$(aws ecs describe-container-instances --cluster $CLUSTER --container-instance $CONTAINER_INSTANCE --query 'containerInstances[0].ec2InstanceId')
EC2_HOSTNAME=$(aws ec2 describe-instances --instance $EC2_INSTANCE --query 'Reservations[0].Instances[0].PublicIpAddress')

echo "Connecting to $EC2_INSTANCE at $EC2_HOSTNAME"
exec ssh ec2-user@$EC2_HOSTNAME -t "echo 'Connecting to docker container'
DOCKER_ID=\$(curl -s localhost:51678/v1/tasks?taskarn=$TASK_ARN | python -c \"import sys, json; containers = json.load(sys.stdin)['Containers']; print next((x['DockerId'] for x in containers if x['Name'] == '$CONTAINER'), '')\")
docker exec -ti \$DOCKER_ID $SHELL"
